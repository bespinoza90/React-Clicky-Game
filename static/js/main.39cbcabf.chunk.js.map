{"version":3,"sources":["data/index.js","components/NavResults/index.js","components/Header/index.js","components/GameCard/index.js","components/GameBoard/index.js","App.js","serviceWorker.js","index.js"],"names":["characters","map","ch","idx","module","exports","navMessages","id","msg","NavResult","messages","msgCode","currScore","maxScore","className","href","Header","props","GameCard","onClick","cardClick","src","image","alt","name","GameBoard","character","key","App","state","guessedIds","navMsgCode","navMsgs","currentScore","includes","setState","sort","a","b","Math","random","this","NavResults","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39cbcabf.chunk.js","sourcesContent":["let characters = [\n\n    {\n        \"id\": 1,\n        \"name\": \"Butch\",\n        \"image\": \"https://vignette.wikia.nocookie.net/animalcrossing/images/d/d2/Butch_-_Animal_Crossing_New_Leaf.png/revision/latest?cb=20130708032928\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Bruce\",\n        \"image\": \"https://vignette.wikia.nocookie.net/animalcrossing/images/4/45/Bruce_HD.png/revision/latest?cb=20180518161455\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Poncho\",\n        \"image\": \"https://vignette.wikia.nocookie.net/animalcrossing/images/4/4c/Poncho_NewLeaf_Official.png/revision/latest?cb=20130721204234\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Raddle\",\n        \"image\": \"https://vignette.wikia.nocookie.net/animalcrossing/images/3/32/Raddle_HD.png/revision/latest?cb=20180518162935\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Merengue\",\n        \"image\": \"https://vignette.wikia.nocookie.net/animalcrossing/images/0/0c/Merengue_NH.png/revision/latest?cb=20200321211014\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Paula\",\n        \"image\": \"https://vignette.wikia.nocookie.net/animalcrossing/images/0/0d/Rachel.png/revision/latest?cb=20130520235305\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"Annabelle\",\n        \"image\": \"https://vignette.wikia.nocookie.net/animalcrossing/images/d/df/Anabelle_NewHorizons.png/revision/latest?cb=20200417190821\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"Kidd\",\n        \"image\": \"https://vignette.wikia.nocookie.net/animalcrossing/images/c/c5/Kidd_HHD.png/revision/latest?cb=20161213013210\"\n    },\n    {\n        \"id\": 10,\n        \"name\": \"Blathers\",\n        \"image\": \"https://vignette.wikia.nocookie.net/animalcrossing/images/b/b3/NH-character-Blathers.png/revision/latest?cb=20200229053519\"\n    },\n    {\n        \"id\": 11,\n        \"name\": \"Daisy-Mae\",\n        \"image\": \"https://vignette.wikia.nocookie.net/animalcrossing/images/8/85/Daisy_Mae.png/revision/latest?cb=20200220213944\"\n    },\n    {\n        \"id\": 12,\n        \"name\": \"Gulliver\",\n        \"image\": \"https://vignette.wikia.nocookie.net/animalcrossing/images/7/74/GulliverNL.png/revision/latest?cb=20130729111729\"\n    },\n\n    {\n        \"id\": 13,\n        \"name\": \"Isabelle\",\n        \"image\": \"https://vignette.wikia.nocookie.net/animalcrossing/images/0/01/Newhorizonsisabelle.png/revision/latest?cb=20200224191140\"\n    },\n\n    {\n        \"id\": 14,\n        \"name\": \"KK Slider\",\n        \"image\": \"https://vignette.wikia.nocookie.net/animalcrossing/images/2/2b/NH-character-K.K._Slider.png/revision/latest?cb=20200519012648\"\n    },\n\n    {\n        \"id\": 15,\n        \"name\": \"Redd\",\n        \"image\": \"https://vignette.wikia.nocookie.net/animalcrossing/images/6/6b/ReddNL.png/revision/latest?cb=20200425083709\"\n    },\n\n    {\n        \"id\": 16,\n        \"name\": \"Tom Nook\",\n        \"image\": \"https://vignette.wikia.nocookie.net/animalcrossing/images/e/ef/NH-character-Tom_Nook.png/revision/latest?cb=20191228193640\"\n    }\n\n\n]\n\n// Add Array Index as id Property to each element.\ncharacters = characters.map((ch, idx ) => {\n    ch[\"id\"] = idx;\n    return ch;\n  });\n  \n  const navMessages = [\n    {\n      id: 0,\n      msg: \"Click an image to begin!\"\n    },\n    {\n      id: 1,\n      msg: \"Try Again!!\"\n    },\n    {\n      id: 2,\n      msg: \"Hit the Next One!!\"\n    },\n    {\n      id: 3,\n      msg: \"You Win!!  Click an image to restart!\"\n    },\n  ]\n  \n  module.exports = { characters, navMessages }","import React from \"react\";\nimport \"./style.css\"\n\nfunction NavResult({messages, msgCode, currScore, maxScore}) {\n  return (\n    <nav className=\"navbar fixed-top navbar-expand-sm navbar-light bg-light\">\n      <div className=\"container\">\n        <a \n          href=\"\"\n          className=\"navbar-brand\"\n        >\n          Animal Crossing <br/> Clicky Game\n        </a>\n\n        <span className=\"navbar-text text-center mx-auto d-none d-sm-block\">{messages[msgCode].msg}</span>\n\n        <ul className=\"navbar-nav ml-auto\">\n          <li className=\"nav-item\">\n            <div className=\"navbar-text mr-1\">\n              <strong>Score:</strong> {currScore}\n            </div>\n          </li>\n          <li className=\"nav-item\">\n            <div className=\"navbar-text\">\n              <strong>Top Score:</strong> {maxScore}\n            </div>\n          </li>\n        </ul>\n\n        <div className=\"navbar-text text-center mx-auto d-block d-sm-none\">\n          <h5>{messages[msgCode].msg}</h5>\n        </div>\n        \n      </div>\n    </nav>\n  );\n}\n\nexport default NavResult;","import React from \"react\";\nimport \"./style.css\"\n\nfunction Header(props) {\n  return (\n    <div className=\"jumbotron instructions\">\n      <h1 className=\"text-center\"> Clicky Game! </h1>\n      <h3 className=\"text-center\"> Click on an image to earn points, but don't click on any more than once!</h3>\n      \n    </div>\n  );\n}\n\nexport default Header;","import React from \"react\";\nimport './style.css';\n\nfunction GameCard(props) {\n  return (\n    <div className=\"col-3 col-md-3 col-lg-3 p-1 p-sm-2\">\n      <div \n        className={props.maxScore === 0 || (0 < props.currScore && props.currScore <= 12) ? \"game-card-img-wrapper\" : \"game-card-img-wrapper shake\"} \n        onClick={props.cardClick}\n      >\n        <img src={props.image} alt={props.name}/>\n      </div>\n    </div>\n  );\n}\n\nexport default GameCard;","import React from \"react\";\nimport GameCard from \"../GameCard\";\nimport './style.css';\n\nfunction GameBoard(props) {\n  return (\n    <div className=\"container mb-xs-1 mb-sm-2\">\n\n      <div className=\"row\">\n        {props.characters.map(character => (\n          <GameCard \n            key={character.id} \n            id={character.id} \n            name={character.name}\n            image={character.image}\n            cardClick={()=>props.cardClick(character.id)}\n            maxScore={props.maxScore}\n            currScore={props.currScore}\n          />\n        ))}\n\n      </div>\n    </div>\n  );\n}\n\nexport default GameBoard;","import React, { Component } from 'react';\nimport { characters, navMessages } from './data'\nimport NavResults from \"./components/NavResults\";\nimport Header from \"./components/Header\";\nimport GameBoard from \"./components/GameBoard\";\nimport \"./App.css\";\n\nclass App extends Component {\n\n  // State Notes\n  // navMsg Codes:\n  //  0: None\n  //  1: Incorrect\n  //  2: Correct\n  //  3: Correct and Win\n  state = {\n    characters: characters,\n    guessedIds: [],\n    maxScore: 0,\n    currScore: 0,\n    navMsgCode: 0,\n    navMsgs: navMessages,\n  };\n  \n\n  componentDidMount() {\n    // Shuffle Array of Characters using sort.\n    this.setState({\n      characters: this.state.characters.sort((a,b) => 0.5 - Math.random())\n    })\n  }\n\n  cardClick = (id) => {\n\n    // Set A local current Score It will loop every 12 Steps\n    const currentScore = this.state.currScore < 12 ?\n      this.state.currScore + 1 : 1;\n\n    // Check if image has been clicked before\n    if (!(this.state.guessedIds.includes(id))) {\n      \n      const maxScore = this.state.maxScore;\n      // If the Image has not been clicked before:\n      // Add the id to the guessed ids.\n      // Set the Motivation Message if score < 12 otherwise set it to win message.\n      // Increment the Current Score by one.\n      this.setState({\n        guessedIds: currentScore < 12 ? [...this.state.guessedIds, id] : [],\n        navMsgCode: currentScore < 12 ? 2 : 3,\n        currScore: currentScore,\n        maxScore: currentScore >= maxScore ? currentScore : maxScore\n      });\n    } else {\n      // If the Image has been clicked before:\n      // Set all values to initial\n      this.setState({\n        guessedIds: [],\n        navMsgCode: 1,\n        currScore: 0\n      });\n    }\n\n    // Shuffle Array of Characters\n    this.setState({\n      characters: this.state.characters.sort((a,b) => 0.5 - Math.random())\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <NavResults\n          messages={this.state.navMsgs}\n          msgCode={this.state.navMsgCode}\n          currScore={this.state.currScore}\n          maxScore={this.state.maxScore}\n        />\n        <Header />\n        <GameBoard \n          characters={this.state.characters}\n          cardClick={this.cardClick}\n          currScore={this.state.currScore}\n          maxScore={this.state.maxScore}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}